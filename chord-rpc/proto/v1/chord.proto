syntax = "proto3";

package chord.v1;

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";

service Chord {
    rpc GetNode (google.protobuf.Empty) returns (Node) {
        option (google.api.http) = {
            get: "/v1/node"
        };
    }

    rpc GetClosestNode (GetClosestNodeRequest) returns (Node) {
        option (google.api.http) = {
            get: "/v1/node{id=?preceding=*}"
        };
    }

    rpc ListKeys (ListKeysRequest) returns (ListKeysResponse) {
        option (google.api.http) = {
            get: "/v1/keys"
        };
    }

    rpc GetKey (GetKeyRequest) returns (Key) {
        option (google.api.http) = {
            get: "/v1/{name=keys/*}"
        };
    }

    rpc CreateKey (CreateKeyRequest) returns (Key) {
        option (google.api.http) = {
            post: "/v1/keys"
        };
    }

    rpc DeleteKey (DeleteKeyRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            delete: "/v1/{name=keys/*}"
        };
    }
}

///

message GetClosestNodeRequest {
    uint64 id = 1;
}

message ListKeysRequest {
    // Reserved for "parent"
    reserved 1;
    int32 page_size = 2;
    string page_token = 3;
}

message ListKeysResponse {
    repeated Key keys = 1;
    string next_page_token = 2;
    int32 total_size = 3;
}

message GetKeyRequest {
    string name = 1;
}

message CreateKeyRequest {
    Key key = 1;
}

message DeleteKeyRequest {
    string name = 1;
}

///

message Node {
    uint64 id = 1;
    string addr = 2;
}

message Key {
    string name = 1;
    bytes data = 2;
    map<string, string> labels = 3;
}
